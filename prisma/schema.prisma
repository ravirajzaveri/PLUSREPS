// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model BetaStreamer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String
  socialLink String?
  category   String
  bio        String
  clipUrl    String?
  createdAt  DateTime @default(now())
}
model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String   @unique
  username       String   @unique
  imageUrl       String   @db.String
  externalUserId String   @unique
  bio            String?  @db.String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  following      Follow[] @relation(name: "Following")
  followedBy     Follow[] @relation(name: "FollowedBy")
  blocking       Block[]  @relation(name: "Blocking")
  blockedby      Block[]  @relation(name: "BlockedBy")
  stream         Stream?
  location   String?           // e.g., "IN", "US"
  interests  String[]          // e.g., ["yoga", "powerlifting"]
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  follower    User     @relation(name: "Following", fields: [followerId], references: [id])
  followerId  String   @db.ObjectId
  following   User     @relation(name: "FollowedBy", fields: [followingId], references: [id])
  followingId String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String?  @db.ObjectId

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  blockerId String @db.ObjectId
  blockedId String @db.ObjectId

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id])
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model Sponsor {
  id               String   @id @default(uuid()) @map("_id")
  name             String
  email            String   @unique
  walletBalanceINR Float    @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  ads              Ad[]
  walletTransactions WalletTransaction[] // âœ… FIX
}

model Ad {
  id                   String   @id @default(uuid()) @map("_id")
  title                String
  videoUrl             String
  durationSeconds      Int
  type                 AdType
  isSkippable          Boolean
  cpmINR               Float // INR per 1000 plays
  dailyBudgetINR       Float
  totalBudgetINR       Float
  startDate            DateTime
  endDate              DateTime
  active               Boolean  @default(true)
  categories           String[] // e.g., ["yoga", "bodybuilding"]
  targetLocations      String[] // ISO codes, e.g., ["IN", "US"]
  minInterestMatch     Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  sponsorId            String
  sponsor              Sponsor @relation(fields: [sponsorId], references: [id])

  views                AdView[]
}

enum AdType {
  PRE_ROLL
  MID_ROLL
}

model AdView {
  id        String   @id @default(uuid()) @map("_id")
  adId      String
  viewerId  String
  streamId  String
  viewedAt  DateTime @default(now())
  skipped   Boolean
  engaged   Boolean

  ad        Ad       @relation(fields: [adId], references: [id])
}

model WalletTransaction {
  id              String   @id @default(uuid()) @map("_id")
  sponsorId       String
  razorpayOrderId String   @unique
  razorpayPaymentId String?
  amountINR       Float
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  sponsor         Sponsor  @relation(fields: [sponsorId], references: [id])
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}


model Stream {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  title               String
  thumbnail           String?
  ingressId           String?  @unique
  serverUrl           String?
  streamKey           String?
  isLive              Boolean  @default(false)
  isChatEnabled       Boolean  @default(true)
  isChatDelayed       Boolean  @default(false)
  isChatFollowersOnly Boolean  @default(false)
  userId              String   @unique @db.ObjectId
  user                User     @relation(fields: [userId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
